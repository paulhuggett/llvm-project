; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=riscv32 -riscv-no-aliases -verify-machineinstrs \
; RUN:     --disable-block-placement < %s \
; RUN:   | FileCheck -check-prefixes=ALL %s
; RUN: llc -mtriple=riscv32 -riscv-no-aliases -verify-machineinstrs \
; RUN:     --disable-block-placement -mattr=+xkeysomnobne < %s \
; RUN:   | FileCheck -check-prefixes=NOBNE %s
; RUN: llc -mtriple=riscv32 -riscv-no-aliases -verify-machineinstrs \
; RUN:     -mattr=+xkeysomnobne -mattr=+xkeysomnobeq < %s \
; RUN:   | FileCheck -check-prefixes=NOBNE_NOBEQ %s

define i32 @f(i32 %a, i32 %b) {
; ALL-LABEL: f:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    bne a0, a1, .LBB0_2
; ALL-NEXT:  # %bb.1: # %fallthrough
; ALL-NEXT:    addi a0, zero, 0
; ALL-NEXT:    jalr zero, 0(ra)
; ALL-NEXT:  .LBB0_2: # %ne_block
; ALL-NEXT:    addi a0, zero, 1
; ALL-NEXT:    jalr zero, 0(ra)
;
; NOBNE-LABEL: f:
; NOBNE:       # %bb.0: # %entry
; NOBNE-NEXT:    blt a0, a1, .LBB0_3
; NOBNE-NEXT:  # %bb.1: # %entry
; NOBNE-NEXT:    blt a1, a0, .LBB0_3
; NOBNE-NEXT:  # %bb.2: # %fallthrough
; NOBNE-NEXT:    addi a0, zero, 0
; NOBNE-NEXT:    jalr zero, 0(ra)
; NOBNE-NEXT:  .LBB0_3: # %ne_block
; NOBNE-NEXT:    addi a0, zero, 1
; NOBNE-NEXT:    jalr zero, 0(ra)
;
; NOBNE_NOBEQ-LABEL: f:
; NOBNE_NOBEQ:       # %bb.0: # %entry
; NOBNE_NOBEQ-NEXT:    blt a0, a1, .LBB0_3
; NOBNE_NOBEQ-NEXT:  # %bb.1: # %entry
; NOBNE_NOBEQ-NEXT:    blt a1, a0, .LBB0_3
; NOBNE_NOBEQ-NEXT:  # %bb.2: # %fallthrough
; NOBNE_NOBEQ-NEXT:    addi a0, zero, 0
; NOBNE_NOBEQ-NEXT:    jalr zero, 0(ra)
; NOBNE_NOBEQ-NEXT:  .LBB0_3: # %ne_block
; NOBNE_NOBEQ-NEXT:    addi a0, zero, 1
; NOBNE_NOBEQ-NEXT:    jalr zero, 0(ra)

entry:
  %cmp = icmp ne i32 %a, %b
  br i1 %cmp, label %ne_block, label %fallthrough

fallthrough:
  ret i32 0

ne_block:
  ret i32 1
}


@glob = global i32 0, align 4

define void @g(i32 %a, i32 %b) {
; ALL-LABEL: g:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    bne a0, a1, .LBB1_2
; ALL-NEXT:  # %bb.1:
; ALL-NEXT:    addi a0, zero, 11
; ALL-NEXT:    jal zero, .LBB1_3
; ALL-NEXT:  .LBB1_2: # %entry
; ALL-NEXT:    addi a0, zero, 7
; ALL-NEXT:  .LBB1_3: # %entry
; ALL-NEXT:    lui a1, %hi(glob)
; ALL-NEXT:    sw a0, %lo(glob)(a1)
; ALL-NEXT:    jalr zero, 0(ra)
;
; NOBNE-LABEL: g:
; NOBNE:       # %bb.0: # %entry
; NOBNE-NEXT:    beq a0, a1, .LBB1_1
; NOBNE-NEXT:    jal zero, .LBB1_2
; NOBNE-NEXT:  .LBB1_1:
; NOBNE-NEXT:    addi a0, zero, 11
; NOBNE-NEXT:    jal zero, .LBB1_3
; NOBNE-NEXT:  .LBB1_2: # %entry
; NOBNE-NEXT:    addi a0, zero, 7
; NOBNE-NEXT:  .LBB1_3: # %entry
; NOBNE-NEXT:    lui a1, %hi(glob)
; NOBNE-NEXT:    sw a0, %lo(glob)(a1)
; NOBNE-NEXT:    jalr zero, 0(ra)
;
; NOBNE_NOBEQ-LABEL: g:
; NOBNE_NOBEQ:       # %bb.0: # %entry
; NOBNE_NOBEQ-NEXT:    blt a0, a1, .LBB1_2
; NOBNE_NOBEQ-NEXT:  # %bb.1: # %entry
; NOBNE_NOBEQ-NEXT:    bge a1, a0, .LBB1_3
; NOBNE_NOBEQ-NEXT:  .LBB1_2: # %entry
; NOBNE_NOBEQ-NEXT:    addi a0, zero, 7
; NOBNE_NOBEQ-NEXT:    jal zero, .LBB1_4
; NOBNE_NOBEQ-NEXT:  .LBB1_3:
; NOBNE_NOBEQ-NEXT:    addi a0, zero, 11
; NOBNE_NOBEQ-NEXT:  .LBB1_4: # %entry
; NOBNE_NOBEQ-NEXT:    lui a1, %hi(glob)
; NOBNE_NOBEQ-NEXT:    sw a0, %lo(glob)(a1)
; NOBNE_NOBEQ-NEXT:    jalr zero, 0(ra)

entry:
  %cmp.not = icmp eq i32 %a, %b
  %. = select i1 %cmp.not, i32 11, i32 7
  store i32 %., ptr @glob, align 4
  ret void
}
